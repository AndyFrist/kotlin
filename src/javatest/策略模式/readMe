https://www.jianshu.com/p/5e9a5a260a94

采用策略模式后，当新增支付方式时，只需要实现一个继承Payment接口的类即可，Shopcart类不需要做任何改动，做到了对修改关闭，对扩展开放的原则，同时也做到针对接口编程，而不是针对实现编程的设计原则。其实真正的项目中，Shopcart是个很复杂的类，里面会有很多业务逻辑，在新增业务不改动旧逻辑，会增加项目的稳定性，也减少测试的工作投入。

策略模式的优点
（1）策略模式提供了管理相关的算法族的办法。策略类的等级结构定义了一个算法或行为族。恰当使用继承可以把公共的代码移到父类里面，从而避免代码重复。
（2）使用策略模式可以避免使用多重条件(if-else)语句。多重条件语句不易维护，它把采取哪一种算法或采取哪一种行为的逻辑与算法或行为的逻辑混合在一起，统统列在一个多重条件语句里面，比使用继承的办法还要原始和落后。
策略模式的缺点
（1）客户端必须知道所有的策略类，并自行决定使用哪一个策略类。这就意味着客户端必须理解这些算法的区别，以便适时选择恰当的算法类。换言之，策略模式只适用于客户端知道算法或行为的情况。
（2）由于策略模式把每个具体的策略实现都单独封装成为类，如果备选的策略很多的话，那么对象的数目就会很可观。

什么时候使用：
某些业务中，某一个行为，会有多个实现类，并且在一次运行中，当前业务只会选择一种实现类。比如商场卖衣服，会有个会员行为，普通会员，银牌会员，金牌会员，客户只能是会员中的一个，不同的人是不同类型的会员，所以他们之间是可以动态替换的。

